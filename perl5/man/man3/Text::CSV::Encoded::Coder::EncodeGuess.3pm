.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Text::CSV::Encoded::Coder::EncodeGuess 3pm"
.TH Text::CSV::Encoded::Coder::EncodeGuess 3pm "2016-01-28" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Text::CSV::Encoded::Coder::EncodeGuess \- Text::CSV::Encoded coder class using Encode::Guess
.SH "VERSION"
.IX Header "VERSION"
version 0.25
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Text::CSV::Encoded  coder_class => \*(AqText::CSV::Encoded::Coder::EncodeGuess\*(Aq;
\&    use Spreadsheet::ParseExcel;
\&    
\&    my $csv = Text::CSV::Encoded\->new();
\&    
\&    $csv\->encoding( [\*(Aqucs2\*(Aq, \*(Aqascii\*(Aq] ); # guessing ucs2 or ascii?
\&    $csv\->encoding_to_combine(\*(Aqshiftjis\*(Aq);
\&    
\&    my $excel = Spreadsheet::ParseExcel::Workbook\->Parse( $file );
\&    my $sheet = $excel\->{Worksheet}\->[0];
\&    
\&    for my $row ( $sheet\->{MinRow} .. $sheet\->{MaxRow} ) {
\&        my @fields;
\&        
\&        for my $col ( $sheet\->{MinCol} ..  $sheet\->{MaxCol} ) {
\&            my $cell = $sheet\->{Cells}[$row][$col];
\&            push @fields, $cell\->{Val};
\&        }
\&        
\&        $csv\->combine( @fields ) or die;
\&        print $csv\->string, "\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is inherited from Text::CSV::Encoded::Coder::Encode.
.SH "USE"
.IX Header "USE"
Except for 2 attributes, same as Text::CSV::Encoded::Coder::Encode.
.SS "encoding_in"
.IX Subsection "encoding_in"
.Vb 1
\&    $csv = $csv\->encoding_in( $encoding_list_ref );
.Ve
.PP
The accessor to an encoding for pre-parsing \s-1CSV\s0 strings.
If no encoding is given, returns current \f(CW$encoding\fR, otherwise the object itself.
.PP
.Vb 1
\&    $encoding_list_ref = $csv\->encoding_in()
.Ve
.PP
When you pass a list reference, it might guess the encoding from the given list.
.PP
.Vb 1
\&    $csv\->encoding_in( [\*(Aqshiftjis\*(Aq, \*(Aqeuc\-jp\*(Aq, \*(Aqiso\-20022\-jp\*(Aq] );
.Ve
.PP
If it cannot guess the encoding, the first encoding of the list is used.
.SS "encoding"
.IX Subsection "encoding"
.Vb 2
\&    $csv = $csv\->encoding( $encoding_list_ref );
\&    $encoding_list_ref = $csv\->encoding();
.Ve
.PP
You can pass a list reference to this attribute only:
.PP
.Vb 2
\&  * For list data consumed by combine().
\&  * For list reference returned by getline().
.Ve
.PP
In other word, in \f(CW\*(C`combine\*(C'\fR and \f(CW\*(C`print\*(C'\fR, it might guess an encoding for the passing list data.
If it cannot guess the encoding, the first encoding of the list is used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Encode, Encode::Guess
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008\-2013 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
