.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::MIME::Header::AddressList 3pm"
.TH Email::MIME::Header::AddressList 3pm "2020-05-24" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::MIME::Header::AddressList
.SH "VERSION"
.IX Header "VERSION"
version 1.949
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $address1 = Email::Address::XS\->new(\*(AqName1\*(Aq => \*(Aqaddress1@host.com\*(Aq);
\&  my $address2 = Email::Address::XS\->new("Name2 \eN{U+263A}" => \*(Aqaddress2@host.com\*(Aq);
\&  my $mime_address = Email::Address::XS\->new(\*(Aq=?UTF\-8?B?TmFtZTIg4pi6?=\*(Aq => \*(Aqaddress2@host.com\*(Aq);
\&
\&  my $list1 = Email::MIME::Header::AddressList\->new($address1, $address2);
\&
\&  $list1\->append_groups(\*(Aqundisclosed\-recipients\*(Aq => []);
\&
\&  $list1\->first_address();
\&  # returns $address1
\&
\&  $list1\->groups();
\&  # returns (undef, [ $address1, $address2 ], \*(Aqundisclosed\-recipients\*(Aq, [])
\&
\&  $list1\->as_string();
\&  # returns \*(AqName1 <address1@host.com>, "Name2 ☺" <address2@host.com>, undisclosed\-recipients:;\*(Aq
\&
\&  $list1\->as_mime_string();
\&  # returns \*(AqName1 <address1@host.com>, =?UTF\-8?B?TmFtZTIg4pi6?= <address2@host.com>, undisclosed\-recipients:;\*(Aq
\&
\&  my $list2 = Email::MIME::Header::AddressList\->new_groups(Group => [ $address1, $address2 ]);
\&
\&  $list2\->append_addresses($address2);
\&
\&  $list2\->addresses();
\&  # returns ($address2, $address1, $address2)
\&
\&  $list2\->groups();
\&  # returns (undef, [ $address2 ], \*(AqGroup\*(Aq, [ $address1, $address2 ])
\&
\&  my $list3 = Email::MIME::Header::AddressList\->new_mime_groups(\*(Aq=?UTF\-8?B?4pi6?=\*(Aq => [ $mime_address ]);
\&  $list3\->as_string();
\&  # returns \*(Aq☺: "Name2 ☺" <address2@host.com>;\*(Aq
\&
\&  my $list4 = Email::MIME::Header::AddressList\->from_string(\*(AqName1 <address1@host.com>, "Name2 ☺" <address2@host.com>, undisclosed\-recipients:;\*(Aq);
\&  my $list5 = Email::MIME::Header::AddressList\->from_string(\*(AqName1 <address1@host.com>\*(Aq, \*(Aq"Name2 ☺" <address2@host.com>\*(Aq, \*(Aqundisclosed\-recipients:;\*(Aq);
\&
\&  my $list6 = Email::MIME::Header::AddressList\->from_mime_string(\*(AqName1 <address1@host.com>, =?UTF\-8?B?TmFtZTIg4pi6?= <address2@host.com>, undisclosed\-recipients:;\*(Aq);
\&  my $list7 = Email::MIME::Header::AddressList\->from_mime_string(\*(AqName1 <address1@host.com>\*(Aq, \*(Aq=?UTF\-8?B?TmFtZTIg4pi6?= <address2@host.com>\*(Aq, \*(Aqundisclosed\-recipients:;\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements object representation for the list of the
Email::Address::XS objects. It provides methods for
\&\s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047> \s-1MIME\s0 encoding and decoding
suitable for \s-1RFC 2822\s0 <https://tools.ietf.org/html/rfc2822> address-list
structure.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None
.SS "Class Methods"
.IX Subsection "Class Methods"
.IP "new_empty" 4
.IX Item "new_empty"
Construct new empty \f(CW\*(C`Email::MIME::Header::AddressList\*(C'\fR object.
.IP "new" 4
.IX Item "new"
Construct new \f(CW\*(C`Email::MIME::Header::AddressList\*(C'\fR object from list of
Email::Address::XS objects.
.IP "new_groups" 4
.IX Item "new_groups"
Construct new \f(CW\*(C`Email::MIME::Header::AddressList\*(C'\fR object from named groups of
Email::Address::XS objects.
.IP "new_mime_groups" 4
.IX Item "new_mime_groups"
Like \f(CW\*(C`new_groups\*(C'\fR but in this method group names and objects properties are
expected to be already \s-1MIME\s0 encoded, thus \s-1ASCII\s0 strings.
.IP "from_string" 4
.IX Item "from_string"
Construct new \f(CW\*(C`Email::MIME::Header::AddressList\*(C'\fR object from input string arguments.
Calls Email::Address::XS::parse_email_groups.
.IP "from_mime_string" 4
.IX Item "from_mime_string"
Like \f(CW\*(C`from_string\*(C'\fR but input string arguments are expected to
be already \s-1MIME\s0 encoded.
.SS "Object Methods"
.IX Subsection "Object Methods"
.IP "as_string" 4
.IX Item "as_string"
Returns string representation of \f(CW\*(C`Email::MIME::Header::AddressList\*(C'\fR object.
Calls Email::Address::XS::format_email_groups.
.IP "as_mime_string" 4
.IX Item "as_mime_string"
Like \f(CW\*(C`as_string\*(C'\fR but output string will be properly and
unambiguously \s-1MIME\s0 encoded. \s-1MIME\s0 encoding is done before calling
Email::Address::XS::format_email_groups.
.IP "first_address" 4
.IX Item "first_address"
Returns first Email::Address::XS object.
.IP "addresses" 4
.IX Item "addresses"
Returns list of all Email::Address::XS objects.
.IP "groups" 4
.IX Item "groups"
Like \f(CW\*(C`addresses\*(C'\fR but returns objects with named groups.
.IP "append_addresses" 4
.IX Item "append_addresses"
Append Email::Address::XS objects.
.IP "append_groups" 4
.IX Item "append_groups"
Like \f(CW\*(C`append_addresses\*(C'\fR but arguments are pairs of name of
group and array reference of Email::Address::XS objects.
.SH "NAME"
Email::MIME::Header::AddressList \- MIME support for list of Email::Address::XS objects
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1RFC 2047\s0 <https://tools.ietf.org/html/rfc2047>,
\&\s-1RFC 2822\s0 <https://tools.ietf.org/html/rfc2822>,
Email::MIME,
Email::Address::XS
.SH "AUTHOR"
.IX Header "AUTHOR"
Pali <pali@cpan.org>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
Casey West <casey@geeknest.com>
.IP "\(bu" 4
Simon Cozens <simon@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Simon Cozens and Casey West.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
