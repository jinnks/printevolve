.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::MIME::Header 3pm"
.TH Email::MIME::Header 3pm "2020-05-24" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::MIME::Header \- the header of a MIME message
.SH "VERSION"
.IX Header "VERSION"
version 1.949
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object behaves like a standard Email::Simple header, with the following
changes:
.IP "\(bu" 4
the \f(CW\*(C`header\*(C'\fR method automatically decodes encoded headers if possible
.IP "\(bu" 4
the \f(CW\*(C`header_as_obj\*(C'\fR method returns an object representation of the header value
.IP "\(bu" 4
the \f(CW\*(C`header_raw\*(C'\fR method returns the raw header; (read only for now)
.IP "\(bu" 4
stringification uses \f(CW\*(C`header_raw\*(C'\fR rather than \f(CW\*(C`header\*(C'\fR
.PP
Note that \f(CW\*(C`header_set\*(C'\fR does not do encoding for you, and expects an
encoded header.  Thus, \f(CW\*(C`header_set\*(C'\fR round-trips with \f(CW\*(C`header_raw\*(C'\fR,
not \f(CW\*(C`header\*(C'\fR!  Be sure to properly encode your headers with
\&\f(CW\*(C`Encode::encode(\*(AqMIME\-Header\*(Aq, $value)\*(C'\fR before passing them to
\&\f(CW\*(C`header_set\*(C'\fR.  And be sure to use minimal version 2.83 of Encode
module due to bugs in MIME-Header.
.PP
Alternately, if you have Unicode (character) strings to set in headers, use the
\&\f(CW\*(C`header_str_set\*(C'\fR method.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.IP "\(bu" 4
Casey West <casey@geeknest.com>
.IP "\(bu" 4
Simon Cozens <simon@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Simon Cozens and Casey West.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
