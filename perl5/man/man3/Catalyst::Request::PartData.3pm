.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Request::PartData 3pm"
.TH Catalyst::Request::PartData 3pm "2020-07-26" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Request::Upload \- handles file upload requests
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    my $data_part =
.Ve
.PP
To specify where Catalyst should put the temporary files, set the 'uploadtmp'
option in the Catalyst config. If unset, Catalyst will use the system temp dir.
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->config( uploadtmp => \*(Aq/path/to/tmpdir\*(Aq );
.Ve
.PP
See also Catalyst.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
This class defines the following immutable attributes
.SS "raw_data"
.IX Subsection "raw_data"
The raw data as returned via HTTP::Body.
.SS "name"
.IX Subsection "name"
The part name that gets extracted from the content-disposition header.
.SS "size"
.IX Subsection "size"
The raw byte count (over http) of the data.  This is not the same as the character
length
.SS "headers"
.IX Subsection "headers"
An HTTP::Headers object that represents the submitted headers of the \s-1POST.\s0  This
object will handle the following methods:
.PP
\fIcontent_type\fR
.IX Subsection "content_type"
.PP
\fIcontent_encoding\fR
.IX Subsection "content_encoding"
.PP
\fIcontent_type_charset\fR
.IX Subsection "content_type_charset"
.PP
These three methods are the same as methods described in HTTP::Headers.
.SH "METHODS"
.IX Header "METHODS"
.SS "build_from_part_data"
.IX Subsection "build_from_part_data"
Factory method to build an object from part data returned by HTTP::Body
.SS "part_data_has_complex_headers"
.IX Subsection "part_data_has_complex_headers"
Returns true if there more than one header (indicates the part data is complex and
contains content type and encoding information.).
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.
