.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CatalystX::InjectComponent 3pm"
.TH CatalystX::InjectComponent 3pm "2012-07-02" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CatalystX::InjectComponent \- Inject components into your Catalyst application
.SH "VERSION"
.IX Header "VERSION"
version 0.025
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package My::App;
\&
\&    use Catalyst::Runtime \*(Aq5.80\*(Aq;
\&
\&    use Moose;
\&    BEGIN { extends qw/Catalyst/ }
\&
\&    ...
\&
\&    after \*(Aqsetup_components\*(Aq => sub {
\&        my $class = shift;
\&        CatalystX::InjectComponent\->inject( into => $class, component => \*(AqMyModel\*(Aq );
\&        if ( $class\->config\->{ ... ) {
\&            CatalystX::InjectComponent\->inject( into => $class, component => \*(AqMyRootV2\*(Aq, as => \*(AqController::Root\*(Aq );
\&        }
\&        else {
\&            CatalystX::InjectComponent\->inject( into => $class, component => \*(AqMyRootV1\*(Aq, as => \*(AqRoot\*(Aq ); # Controller:: will be automatically prefixed
\&        }
\&    };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
CatalystX::InjectComponent will inject Controller, Model, and View components into your Catalyst application at setup (run)time. It does this by creating
a new package on-the-fly, having that package extend the given component, and then having Catalyst setup the new component (via \f(CW\*(C`\->setup_component\*(C'\fR)
.SH "So, how do I use this thing?"
.IX Header "So, how do I use this thing?"
You should inject your components when appropriate, typically after \f(CW\*(C`setup_compenents\*(C'\fR runs
.PP
If you're using the Moose version of Catalyst, then you can use the following technique:
.PP
.Vb 2
\&    use Moose;
\&    BEGIN { extends qw/Catalyst/ }
\&
\&    after \*(Aqsetup_components\*(Aq => sub {
\&        my $class = shift;
\&
\&        CatalystX::InjectComponent\->inject( into => $class, ... )
\&    };
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "CatalystX::InjectComponent\->inject( ... )"
.IX Subsection "CatalystX::InjectComponent->inject( ... )"
.Vb 3
\&    into        The Catalyst package to inject into (e.g. My::App)
\&    component   The component package to inject
\&    as          An optional moniker to use as the package name for the derived component
.Ve
.PP
For example:
.PP
.Vb 1
\&    \->inject( into => My::App, component => Other::App::Controller::Apple )
\&        
\&        The above will create \*(AqMy::App::Controller::Other::App::Controller::Apple\*(Aq
\&
\&    \->inject( into => My::App, component => Other::App::Controller::Apple, as => Apple )
\&
\&        The above will create \*(AqMy::App::Controller::Apple\*(Aq
.Ve
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Inspired by Catalyst::Plugin::AutoCRUD
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Krimen <robertkrimen@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert Krimen.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
