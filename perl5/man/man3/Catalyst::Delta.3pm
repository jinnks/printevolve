.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::Delta 3pm"
.TH Catalyst::Delta 3pm "2020-07-26" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::Delta \- Overview of changes between versions of Catalyst
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an overview of the user-visible changes to Catalyst between major
Catalyst releases.
.SS "\s-1VERSION 5.90105\s0"
.IX Subsection "VERSION 5.90105"
This version primarily fixed a regression in the way we preserved \f(CW$c\fR\->state
which the previous version introduced.  Now in the case when you forward to
an action, should that action throw an exception it sets state to 0 and is
sure that the return value is false.  This is to meet expected behavior based
on the documentation.  If you relied on the last update behavior you may not have
regressions but it was thought that we should make the code behave as documented
for more than 10 years.
.PP
We also changed how we compose the request, response and stats base class.  We
now compose the base class with any configured traits once at the end of the
application setup, rather than for each request.  This reduced request overhead
when you are composing lots of traits.  It possible this may break some code that
was adding traits after the application setup was finalized.  Please shout out if
this actually causes you trouble and we'll do the best to accommodate.
.SS "\s-1VERSION 5.90102\s0 \- 5.90103"
.IX Subsection "VERSION 5.90102 - 5.90103"
A significant change is that we now preserve the value of \f(CW$c\fR\->state from action
to following action.  This gives you a new way to pass a value between actions
in a chain, for example.   However any 'auto' actions always have \f(CW$c\fR\->state
forced to be set to 0, which is the way its been for a long time, this way an
auto action is required to return 1 to pass the match.  It also exists to maintain
compatibility with anyone that exits an auto action with a detach (which is not a
documented way to escape matching, but exists in the wild since it worked as a
side effect of the code for a long time).
.PP
Additionally, upon \f(CW$c\fR\->detach we also force set state to 0.
.PP
Version 5.90102 contains a version of this change but its considered buggy, so
that is a version to avoid.
.SS "\s-1VERSION 5.90100\s0"
.IX Subsection "VERSION 5.90100"
Support for type constraints in Args and CaptureArgs has been improved.  You may
now inherit from a base controller that declares type constraints and use roles
that declare type constraints.  See Catalyst::RouteMatching for more.
.PP
You may now. also use a full type constraint namespace instead of importing type
constraints into your package namespace.
.PP
We changed the way the middleware stash works so that it no longer localizes
the \s-1PSGI\s0 env hashref.  This was done to fix bugs where people set \s-1PSGI ENV\s0 hash
keys and found them to disappear in certain cases.  It also means that now if
a sub applications sets stash variables, that stash will now bubble up to the
parent application.  This may be a breaking change for you since previous
versions of this code did not allow that.  A workaround is to explicitly delete
stash keys in your sub application before returning control to the parent
application.
.SS "\s-1VERSION 5.90097\s0"
.IX Subsection "VERSION 5.90097"
\fIDefined how \f(CI$c\fI\->uri_for adds a \s-1URI\s0 fragment.\fR
.IX Subsection "Defined how $c->uri_for adds a URI fragment."
.PP
We now have a specification for creating URIs with fragments (or \s-1HTML\s0 anchors).
Previously you could do this as a side effect of how we create URIs but this
side effect behavior was never documented or tested, and was broken when we
introduced default \s-1UTF\-8\s0 encoding.  When creating URIs with fragments please
follow the new, supported specification:
.PP
.Vb 1
\&    $c\->uri_for($action_or_path, \e@captures_or_args, @args, \e$query, \e$fragment);
.Ve
.PP
This will be a breaking change for some codebases, we recommend testing if
you are creating URLs with fragments.
.PP
\&\fB\s-1NOTE\s0\fR If you are using the alternative:
.PP
.Vb 1
\&    $c\->uri_for(\*(Aq/foo/bar#baz\*(Aq)
.Ve
.PP
construction, we do not attempt to encode this and it will make a \s-1URL\s0 with a
fragment of 'baz'.
.SS "\s-1VERSION 5.90094\s0"
.IX Subsection "VERSION 5.90094"
\fIMultipart form \s-1POST\s0 with character set headers\fR
.IX Subsection "Multipart form POST with character set headers"
.PP
When we did the \s-1UTF8\s0 work, we punted on Form POSTs when the \s-1POST\s0 envelope was
multipart and each part had complex headers such as content-types, character
sets and so forth.  In those cases instead of returning a possibly incorrect
value, we returned an object describing the part so that you could figure it
out manually.  This turned out to be a bad workaround as people did not expect
to find that object.  So we changed this to try much harder to get a correct
value.  We still return an object if we fail but we try much harder now.  If
you used to check for the object you might find that code is no longer needed
(although checking for it should not hurt or break anything either).
.SS "\s-1VERSION 5.90091\s0"
.IX Subsection "VERSION 5.90091"
\fI'case_sensitive' configuration\fR
.IX Subsection "'case_sensitive' configuration"
.PP
At one point in time we allowed you to set a 'case_sensitive' configuration value so
that you could find actions by their private names using mixed case.  We highly
discourage that.  If you are using this 'feature' you should be on notice that we
plan to remove the code around it in the near future.
.SS "\s-1VERSION 5.90090+\s0"
.IX Subsection "VERSION 5.90090+"
\fIType constraints on Args and CaptureArgs.\fR
.IX Subsection "Type constraints on Args and CaptureArgs."
.PP
You may now use a type constraint (using Moose, MooseX::Types or preferably
Type::Tiny in your Args or CaptureArgs action attributes.  This can be used
to restrict the value of the Arg.  For example:
.PP
.Vb 1
\&    sub myaction :Local Args(Int) { ... }
.Ve
.PP
Would match '.../myaction/5' but not '.../myaction/string'.
.PP
When an action (or action chain) has Args (or CaptureArgs) that declare type constraints
your arguments to \f(CW$c\fR\->uri_for(...) must match those constraints.
.PP
See Catalyst::RouteMatching for more.
.PP
\fIMove CatalystX::InjectComponent into core\fR
.IX Subsection "Move CatalystX::InjectComponent into core"
.PP
Catalyst::Utils has a new method 'inject_component' which works the same as the method of
the same name in CatalystX::InjectComponent.
.PP
\fIinject_components\fR
.IX Subsection "inject_components"
.PP
New configuration key allows you to inject components directly into your application without
any subclasses.  For example:
.PP
.Vb 10
\&    MyApp\->config({
\&      inject_components => {
\&        \*(AqController::Err\*(Aq => { from_component => \*(AqLocal::Controller::Errors\*(Aq },
\&        \*(AqModel::Zoo\*(Aq => { from_component => \*(AqLocal::Model::Foo\*(Aq },
\&        \*(AqModel::Foo\*(Aq => { from_component => \*(AqLocal::Model::Foo\*(Aq, roles => [\*(AqTestRole\*(Aq] },
\&      },
\&      \*(AqController::Err\*(Aq => { a => 100, b=>200, namespace=>\*(Aqerror\*(Aq },
\&      \*(AqModel::Zoo\*(Aq => { a => 2 },
\&      \*(AqModel::Foo\*(Aq => { a => 100 },
\&    });
.Ve
.PP
Injected components are useful to reduce the amount of nearly empty boilerplate classes
you might have, particularly when first starting an application.
.PP
\fIComponent setup changes.\fR
.IX Subsection "Component setup changes."
.PP
Previously you could not depend on an application scoped component doing setup_components
since components were setup 'in order'.  Now all components are first registered and then
setup, so you can now reliably use any component doing setup_components.
.SS "\s-1VERSION 5.90080+\s0"
.IX Subsection "VERSION 5.90080+"
The biggest change in this release is that \s-1UTF8\s0 encoding is now enabled by
default.  So you no longer need any plugins (such as Catalyst::Plugin::Unicode::Encoding)
which you can just no go ahead and remove.  You also don't need to set
the encoding configuration (_\|_PACKAGE_\|_\->config(encoding=>'\s-1UTF\-8\s0')) anymore
as well (although its presence hurts nothing).
.PP
If this change causes you trouble, you can disable it:
.PP
.Vb 1
\&    _\|_PACKAGE_\|_\->config(encoding=>undef);
.Ve
.PP
For further information, please see Catalyst::UTF8
.PP
But please report bugs.  You will find that a number of common Views have been
updated for this release (such as Catalyst::View::TT).  In all cases that the
author is aware of these updates were to fix test cases only.  You shouldn't
need to update unless you are installing fresh and want tests to pass.
.PP
Catalyst::Plugin::Compress was updated to be compatible with this release.
You will need to upgrade if you are using this plugin.  Catalyst::Upgrading
also has details.
.PP
A small change is that the configuration setting \f(CW\*(C`using_frontend_proxy\*(C'\fR
was not doing the right thing if you started your application with \f(CW\*(C`psgi_app\*(C'\fR
and did not apply the default middleware.  This setting is now honored in
all the ways an application may be started.  This could cause trouble if you
are using the configuration value and also adding the proxy middleware
manually with a custom application startup.  The solution is that you only
need the configuration value set, or the middleware manually added (not both).
.SS "\s-1VERSION 5.90060+\s0"
.IX Subsection "VERSION 5.90060+"
\fICatalyst::Log object autoflush on by default\fR
.IX Subsection "Catalyst::Log object autoflush on by default"
.PP
Starting in 5.90065, the Catalyst::Log object has 'autoflush' which is on
by default. This causes all messages to be written to the log immediately
instead of at the end of startup and then at the end of each request. In
order to access the old behavior, you must now call:
.PP
.Vb 1
\&  $c\->log\->autoflush(0);
.Ve
.PP
\fIDeprecate Catalyst::Utils::ensure_class_loaded\fR
.IX Subsection "Deprecate Catalyst::Utils::ensure_class_loaded"
.PP
Going forward we recommend you use Module::Runtime.  In fact we will
be converting all uses of Class::Load to Module::Runtime.  We will
also convert Catalyst::Utils\eensure_class_loaded to be based on
Module::Runtime to allow some time for you to update code, however at
some future point this method will be removed so you should stop
using it now.
.PP
\fISupport passing Body filehandles directly to your Plack server.\fR
.IX Subsection "Support passing Body filehandles directly to your Plack server."
.PP
We changed the way we return body content (from response) to whatever
Plack handler you are using (Starman, FastCGI, etc.)  We no longer
always use the streaming interface for the cases when the body is a
simple scalar, object or filehandle like.  In those cases we now just
pass the simple response on to the plack handler.  This might lead to
some minor differences in how streaming is handled.  For example, you
might notice that streaming starts properly supporting chunked encoding when
on a server that supports that, or that previously missing headers
(possible content-length) might appear suddenly correct.  Also, if you
are using middleware like Plack::Middleware::XSendfile and are using
a filehandle that sets a readable path, your server might now correctly
handle the file (rather than as before where Catalyst would stream it
very likely very slowly).
.PP
In other words, some things might be meaninglessly different and some
things that were broken codewise but worked because of Catalyst being
incorrect might suddenly be really broken.  The behavior is now more
correct in that Catalyst plays better with features that Plack offers
but if you are making heavy use of the streaming interface there could
be some differences so you should test carefully (this is probably not
the vast majority of people).  In particular if you are developing
using one server but deploying using a different one, differences in
what those server do with streaming should be noted.
.PP
Please see note below about changes to filehandle support and existing
Plack middleware to aid in backwards compatibility.
.PP
\fIDistinguish between body null versus undef.\fR
.IX Subsection "Distinguish between body null versus undef."
.PP
We also now more carefully distinguish the different between a body set
to '' and a body that is undef.  This might lead to situations where
again you'll get a content-length were you didn't get one before or
where a supporting server will start chunking output.  If this is an
issue you can apply the middleware Plack::Middleware::BufferedStreaming
or report specific problems to the dev team.
.PP
\fIMore Catalyst Middleware\fR
.IX Subsection "More Catalyst Middleware"
.PP
We have started migrating code in Catalyst to equivalent Plack
Middleware when such exists and is correct to do so.  For example we now use
Plack::Middleware::ContentLength to determine content length of a response
when none is provided.  This replaces similar code inlined with Catalyst
The main advantages to doing this is 1) more similar Catalyst core that is
focused on the Catalyst special sauce, 2) Middleware is more broadly shared
so we benefit from better collaboration with developers outside Catalyst, 3)
In the future you'll be able to change or trim the middleware stack to get
additional performance when you don't need all the checks and constraints.
.PP
\fIDeprecate Filehandle like objects that do read but not getline\fR
.IX Subsection "Deprecate Filehandle like objects that do read but not getline"
.PP
We also deprecated setting the response body to an object that does 'read'
but not 'getline'.  If you are using a custom IO-Handle like object for
response you should verify that 'getline' is supported in your interface.
Unless we here this case is a major issue for people, we will be removing support
in a near future release of Catalyst.  When the code encounters this it
will issue a warning.  You also may run into this issue with MogileFS::Client
which does read but not getline.  For now we will just warn when encountering
such an object and fallback to the previous behavior (where Catalyst::Engine
itself unrolls the filehandle and performs blocking streams).  However
this backwards compatibility will be removed in an upcoming release so you should either
rewrite your custom filehandle objects to support getline or start using the
middleware that adapts read for getline Plack::Middleware::AdaptFilehandleRead.
.PP
\fIResponse\->headers become read-only after finalizing\fR
.IX Subsection "Response->headers become read-only after finalizing"
.PP
Once the response headers are finalized, trying to change them is not allowed
(in the past you could change them and this would lead to unexpected results).
.PP
\fIOfficially deprecate Catalyst::Engine::PSGI\fR
.IX Subsection "Officially deprecate Catalyst::Engine::PSGI"
.PP
Catalyst::Engine::PSGI is also officially no longer supported.  We will
no long run test cases against this and can remove backwards compatibility code for it
as deemed necessary for the evolution of the platform.  You should simply
discontinue use of this engine, as Catalyst has been \s-1PSGI\s0 at the core for
several years.
.PP
\fIOfficially deprecate finding the \s-1PSGI\s0 \f(CI$env\fI anyplace other than Request\fR
.IX Subsection "Officially deprecate finding the PSGI $env anyplace other than Request"
.PP
A few early releases of Cataplack had the \s-1PSGI\s0 \f(CW$env\fR in Catalyst::Engine.
Code has been maintained here for backwards compatibility reasons.  This is no
longer supported and will be removed in upcoming release, so you should update
your code and / or upgrade to a newer version of Catalyst
.PP
\fIDeprecate setting Response\->body after using write/write_fh\fR
.IX Subsection "Deprecate setting Response->body after using write/write_fh"
.PP
Setting \f(CW$c\fR\->res\->body to a filehandle after using \f(CW$c\fR\->res\->write or
\&\f(CW$c\fR\->res\->write_fh is no longer considered allowed, since we can't send
the filehandle to the underlying Plack handler.  For now we will continue
to support setting body to a simple value since this is possible, but at
some future release a choice to use streaming indicates that you will do
so for the rest of the request.
.SS "\s-1VERSION 5.90053\s0"
.IX Subsection "VERSION 5.90053"
We are now clarifying the behavior of log, plugins and configuration during
the setup phase.  Since Plugins might require a log during setup, setup_log
must run \s-1BEFORE\s0 setup_plugins.   This has the unfortunate side effect that
anyone using the popular ConfigLoader plugin will not be able to supply
configuration to custom logs since the configuration is not yet finalized
when setup_log is run (when using ConfigLoader, which is a plugin and is
not loaded until later.)
.PP
As a workaround, you can supply custom log configuration directly into
the configuration:
.PP
.Vb 2
\&    package MyApp;
\&    use Catalyst;
\&
\&    _\|_PACKAGE_\|_\->config(
\&      my_custom_log_info => { %custom_args },
\&    );
\&
\&    _\|_PACKAGE_\|_\->setup;
.Ve
.PP
If you wish to configure the custom logger differently based on \s-1ENV,\s0 you can
try:
.PP
.Vb 1
\&    package MyApp;
\&
\&    use Catalyst;
\&    use Catalyst::Utils;
\&
\&    _\|_PACKAGE_\|_\->config(
\&      Catalyst::Utils::merge_hashes(
\&        +{ my_custom_log_info => { %base_custom_args } },
\&        +{ do _\|_PACKAGE_\|_\->path_to( $ENV{WHICH_CONF}."_conf.pl") },
\&      ),
\&    );
\&
\&    _\|_PACKAGE_\|_\->setup;
.Ve
.PP
Or create a standalone Configuration class that does the right thing.
.PP
Basically if you want to configure a logger via Catalyst global configuration
you can't use ConfigLoader because it will always be loaded too late to be of
any use.  Patches and workaround options welcomed!
.SS "\s-1VERSION 5.9XXXX\s0 'cataplack'"
.IX Subsection "VERSION 5.9XXXX 'cataplack'"
The Catalyst::Engine sub-classes have all been removed and deprecated,
to be replaced with Plack handlers.
.PP
Plack is an implementation of the \s-1PSGI\s0 specification, which is
a standard interface between web servers and application frameworks.
.PP
This should be no different for developers, and you should not have to
migrate your applications unless you are using a custom engine already.
.PP
This change benefits Catalyst significantly by reducing the amount of
code inside the framework, and means that the framework gets upstream
bug fixes in Plack, and automatically gains support for any web server
which a \s-1PSGI\s0 compliant handler is written for.
.PP
It also allows you more flexibility with your application, and allows
the use of cross web framework 'middleware'.
.PP
Developers are recommended to read Catalyst::Upgrading for notes about
upgrading, especially if you are using an unusual deployment method.
.PP
Documentation for how to take advantage of \s-1PSGI\s0 can be found in
Catalyst::PSGI, and information about deploying your application
has been moved to Catalyst::Manual::Deployment.
.PP
\fIUpdated modules:\fR
.IX Subsection "Updated modules:"
.PP
A number of modules have been updated to pass their tests or not
produce deprecation warnings with the latest version of Catalyst.
It is recommended that you upgrade any of these that you are using
after installing this version of Catalyst.
.PP
These extensions are:
.IP "Catalyst::Engine::HTTP::Prefork" 4
.IX Item "Catalyst::Engine::HTTP::Prefork"
This is now deprecated, see Catalyst::Upgrading.
.IP "Test::WWW::Mechanize::Catalyst" 4
.IX Item "Test::WWW::Mechanize::Catalyst"
Has been updated to not produce deprecation warnings, upgrade recommended.
.IP "Catalyst::ActionRole::ACL" 4
.IX Item "Catalyst::ActionRole::ACL"
Has been updated to fix failing tests (although older versions still
function perfectly with this version of Catalyst).
.IP "Catalyst::Plugin::Session::Store::DBIC" 4
.IX Item "Catalyst::Plugin::Session::Store::DBIC"
Has been updated to fix failing tests (although older versions still
function perfectly with this version of Catalyst).
.IP "Catalyst::Plugin::Authentication" 4
.IX Item "Catalyst::Plugin::Authentication"
Has been updated to fix failing tests (although older versions still
function perfectly with this version of Catalyst).
.SH "PREVIOUS VERSIONS"
.IX Header "PREVIOUS VERSIONS"
.SS "\s-1VERSION 5.8XXXX\s0 'catamoose'"
.IX Subsection "VERSION 5.8XXXX 'catamoose'"
\fIDeprecations\fR
.IX Subsection "Deprecations"
.PP
Please see Catalyst::Upgrading for a full description of how changes in the
framework may affect your application.
.PP
Below is a brief list of features which have been deprecated in this release:
.IP "::[\s-1MVC\s0]:: style naming scheme has been deprecated and will warn" 4
.IX Item "::[MVC]:: style naming scheme has been deprecated and will warn"
.PD 0
.IP "\s-1NEXT\s0 is deprecated for all applications and components, use MRO::Compat" 4
.IX Item "NEXT is deprecated for all applications and components, use MRO::Compat"
.IP "Dispatcher methods which are an implementation detail made private, public versions now warn." 4
.IX Item "Dispatcher methods which are an implementation detail made private, public versions now warn."
.IP "MyApp\->plugin method is deprecated, use Catalyst::Model::Adaptor instead." 4
.IX Item "MyApp->plugin method is deprecated, use Catalyst::Model::Adaptor instead."
.IP "_\|_PACKAGE_\|_\->\fBmk_accessors()\fR is supported for backwards compatibility only, use Moose attributes instead in new code." 4
.IX Item "__PACKAGE__->mk_accessors() is supported for backwards compatibility only, use Moose attributes instead in new code."
.IP "Use of Catalyst::Base now warns" 4
.IX Item "Use of Catalyst::Base now warns"
.PD
.PP
\fINew features\fR
.IX Subsection "New features"
.PP
\fIDispatcher\fR
.IX Subsection "Dispatcher"
.IP "Fix forwarding to Catalyst::Action objects." 4
.IX Item "Fix forwarding to Catalyst::Action objects."
.PD 0
.IP "Add the dispatch_type method" 4
.IX Item "Add the dispatch_type method"
.PD
.PP
\fIRestarter\fR
.IX Subsection "Restarter"
.PP
The development server restarter has been improved to be compatible with
immutable Moose classes, and also to optionally use
B::Hooks::OP::Check::StashChange to handle more complex application layouts
correctly.
.PP
\fI\f(CI$c\fI\->uri_for_action method.\fR
.IX Subsection "$c->uri_for_action method."
.PP
Give a private path to the Catalyst action you want to create a \s-1URI\s0 for.
.PP
\fILogging\fR
.IX Subsection "Logging"
.PP
Log levels have been made additive.
.PP
\fICatalyst::Test\fR
.IX Subsection "Catalyst::Test"
.IP "Change to use Sub::Exporter." 4
.IX Item "Change to use Sub::Exporter."
.PD 0
.IP "Support mocking multiple virtual hosts" 4
.IX Item "Support mocking multiple virtual hosts"
.IP "New methods like action_ok and action_redirect to write more compact tests" 4
.IX Item "New methods like action_ok and action_redirect to write more compact tests"
.PD
.PP
\fICatalyst::Response\fR
.IX Subsection "Catalyst::Response"
.IP "\(bu" 4
New print method which prints \f(CW@data\fR to the output stream, separated by $,.
This lets you pass the response object to functions that want to write to an
IO::Handle.
.IP "\(bu" 4
Added code method as an alias for \f(CW\*(C`$res\->status\*(C'\fR
.PP
\fIConsequences of the Moose back end\fR
.IX Subsection "Consequences of the Moose back end"
.IP "\(bu" 4
Components are fully compatible with Moose, and all Moose features, such as
method modifiers, attributes, roles, \s-1BUILD\s0 and \s-1BUILDARGS\s0 methods are fully
supported and may be used in components and applications.
.IP "\(bu" 4
Many reusable extensions which would previously have been plugins or base
classes are better implemented as Moose roles.
.IP "\(bu" 4
MooseX::MethodAttributes::Role::AttrContainer::Inheritable is used to contain action
attributes. This means that attributes are represented in the \s-1MOP,\s0 and
decouples action creation from attributes.
.IP "\(bu" 4
There is a reasonable \s-1API\s0 in Catalyst::Controller for working with
and registering actions, allowing a controller sub-class to replace
subroutine attributes for action declarations with an alternate
syntax.
.IP "\(bu" 4
Refactored capturing of \f(CW$app\fR from Catalyst::Controller into
Catalyst::Component::ApplicationAttribute for easier reuse in other
components.
.IP "\(bu" 4
Your application class is forced to become immutable at the end of compilation.
.PP
\fIBug fixes\fR
.IX Subsection "Bug fixes"
.IP "\(bu" 4
Don't ignore \s-1SIGCHLD\s0 while handling requests with the development server, so that
\&\fBsystem()\fR and other ways of creating child processes work as expected.
.IP "\(bu" 4
Fixes for FastCGI when used with \s-1IIS 6.0\s0
.IP "\(bu" 4
Fix a bug in uri_for which could cause it to generate paths with multiple
slashes in them.
.IP "\(bu" 4
Fix a bug in Catalyst::Stats, stopping garbage being inserted into
the stats if a user calls begin => but no end
