.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Catalyst::ActionRole::Scheme 3pm"
.TH Catalyst::ActionRole::Scheme 3pm "2020-07-26" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Catalyst::ActionRole::Scheme \- Match on HTTP Request Scheme
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Web::Controller::MyController;
\&
\&    use base \*(AqCatalyst::Controller\*(Aq;
\&
\&    sub is_http :Path(scheme) Scheme(http) Args(0) {
\&      my ($self, $c) = @_;
\&      Test::More::is $c\->action\->scheme, \*(Aqhttp\*(Aq;
\&      $c\->response\->body("is_http");
\&    }
\&
\&    sub is_https :Path(scheme) Scheme(https) Args(0)  {
\&      my ($self, $c) = @_;
\&      Test::More::is $c\->action\->scheme, \*(Aqhttps\*(Aq;
\&      $c\->response\->body("is_https");
\&    }
\&
\&    1;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an action role that lets your Catalyst::Action match on the scheme
type of the request.  Typically this is \f(CW\*(C`http\*(C'\fR or \f(CW\*(C`https\*(C'\fR but other common
schemes that Catalyst can handle include \f(CW\*(C`ws\*(C'\fR and \f(CW\*(C`wss\*(C'\fR (web socket and web
socket secure).
.PP
This also ensures that if you use \f(CW\*(C`uri_for\*(C'\fR on an action that specifies a
match scheme, that the generated \s-1URI\s0 object sets its scheme to that automatically
(rather than the scheme of the current request object, which is and remains the
default behavior.)
.PP
For matching purposes, we match strings but the casing is insensitive.
.SH "REQUIRES"
.IX Header "REQUIRES"
This role requires the following methods in the consuming class.
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Returns 1 if the action matches the existing request and zero if not.
.SH "METHODS"
.IX Header "METHODS"
This role defines the following methods
.SS "match"
.IX Subsection "match"
.SS "match_captures"
.IX Subsection "match_captures"
Around method modifier that return 1 if the scheme matches
.SS "list_extra_info"
.IX Subsection "list_extra_info"
Add the scheme declaration if present to the debug screen.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
See Catalyst
