.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "curry 3pm"
.TH curry 3pm "2017-06-23" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
curry \- Create automatic curried method call closures for any class or object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use curry;
\&
\&  my $code = $obj\->curry::frobnicate(\*(Aqfoo\*(Aq);
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&  my $code = sub { $obj\->frobnicate(foo => @_) };
.Ve
.PP
Additionally,
.PP
.Vb 1
\&  use curry::weak;
\&
\&  my $code = $obj\->curry::weak::frobnicate(\*(Aqfoo\*(Aq);
.Ve
.PP
is equivalent to:
.PP
.Vb 7
\&  my $code = do {
\&    Scalar::Util::weaken(my $weak_obj = $obj);
\&    sub {
\&      return unless $weak_obj; # in case it already went away
\&      $weak_obj\->frobnicate(foo => @_)
\&    };
\&  };
.Ve
.PP
If you want to pass a weakened copy of an object to a coderef, use the
\&\f(CW $weak \fR package variable:
.PP
.Vb 1
\& use curry::weak;
\&
\& my $code = $self\->$curry::weak(sub {
\&  my ($self, @args) = @_;
\&  print "$self must still be alive, because we were called (with @args)\en";
\& }, \*(Aqxyz\*(Aq);
.Ve
.PP
which is much the same as:
.PP
.Vb 11
\& my $code = do {
\&  my $sub = sub {
\&   my ($self, @args) = @_;
\&   print "$self must still be alive, because we were called (with @args)\en";
\&  };
\&  Scalar::Util::weaken(my $weak_obj = $self);
\&  sub {
\&   return unless $weak_obj; # in case it already went away
\&   $sub\->($weak_obj, \*(Aqxyz\*(Aq, @_);
\&  }
\& };
.Ve
.PP
There's an equivalent \- but somewhat less useful \- \f(CW $curry \fR package variable:
.PP
.Vb 1
\& use curry;
\&
\& my $code = $self\->$curry::curry(sub {
\&  my ($self, $var) = @_;
\&  print "The stashed value from our \->something method call was $var\en";
\& }, $self\->something(\*(Aqcomplicated\*(Aq));
.Ve
.PP
Both of these methods can also be used if your scalar is a method name, rather
than a coderef.
.PP
.Vb 1
\& use curry;
\&
\& my $code = $self\->$curry::curry($methodname, $self\->something(\*(Aqcomplicated\*(Aq));
.Ve
.SH "RATIONALE"
.IX Header "RATIONALE"
How many times have you written
.PP
.Vb 1
\&  sub { $obj\->something($some, $args, @_) }
.Ve
.PP
or worse still needed to weaken it and had to check and re-check your code
to be sure you weren't closing over things the wrong way?
.PP
Right. That's why I wrote this.
.SH "AUTHOR"
.IX Header "AUTHOR"
mst \- Matt S. Trout (cpan:MSTROUT) <mst@shadowcat.co.uk>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
None yet \- maybe this software is perfect! (ahahahahahahahahaha)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2012 the curry \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
