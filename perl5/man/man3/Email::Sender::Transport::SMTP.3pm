.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::Sender::Transport::SMTP 3pm"
.TH Email::Sender::Transport::SMTP 3pm "2020-10-10" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::Sender::Transport::SMTP \- send email over SMTP
.SH "VERSION"
.IX Header "VERSION"
version 1.300035
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This transport is used to send email over \s-1SMTP,\s0 either with or without secure
sockets (\s-1SSL/TLS\s0).  It is one of the most complex transports available, capable
of partial success.
.PP
For a potentially more efficient version of this transport, see
Email::Sender::Transport::SMTP::Persistent.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
The following attributes may be passed to the constructor:
.ie n .IP """hosts"": an arrayref of names of the host to try, in order; defaults to a single element array containing ""localhost""" 4
.el .IP "\f(CWhosts\fR: an arrayref of names of the host to try, in order; defaults to a single element array containing \f(CWlocalhost\fR" 4
.IX Item "hosts: an arrayref of names of the host to try, in order; defaults to a single element array containing localhost"
The attribute \f(CW\*(C`host\*(C'\fR may be given, instead, which contains a single hostname.
.ie n .IP """ssl"": if 'starttls', use \s-1STARTTLS\s0; if 'ssl' (or 1), connect securely; otherwise, no security" 4
.el .IP "\f(CWssl\fR: if 'starttls', use \s-1STARTTLS\s0; if 'ssl' (or 1), connect securely; otherwise, no security" 4
.IX Item "ssl: if 'starttls', use STARTTLS; if 'ssl' (or 1), connect securely; otherwise, no security"
.PD 0
.ie n .IP """ssl_options"": passed to Net::SMTP constructor for 'ssl' connections or to starttls for 'starttls' connections; should contain extra options for IO::Socket::SSL" 4
.el .IP "\f(CWssl_options\fR: passed to Net::SMTP constructor for 'ssl' connections or to starttls for 'starttls' connections; should contain extra options for IO::Socket::SSL" 4
.IX Item "ssl_options: passed to Net::SMTP constructor for 'ssl' connections or to starttls for 'starttls' connections; should contain extra options for IO::Socket::SSL"
.ie n .IP """port"": port to connect to; defaults to 25 for non-SSL, 465 for 'ssl', 587 for 'starttls'" 4
.el .IP "\f(CWport\fR: port to connect to; defaults to 25 for non-SSL, 465 for 'ssl', 587 for 'starttls'" 4
.IX Item "port: port to connect to; defaults to 25 for non-SSL, 465 for 'ssl', 587 for 'starttls'"
.ie n .IP """timeout"": maximum time in secs to wait for server; default is 120" 4
.el .IP "\f(CWtimeout\fR: maximum time in secs to wait for server; default is 120" 4
.IX Item "timeout: maximum time in secs to wait for server; default is 120"
.ie n .IP """sasl_username"": the username to use for auth; optional" 4
.el .IP "\f(CWsasl_username\fR: the username to use for auth; optional" 4
.IX Item "sasl_username: the username to use for auth; optional"
.ie n .IP """sasl_password"": the password to use for auth; required if ""sasl_username"" is provided" 4
.el .IP "\f(CWsasl_password\fR: the password to use for auth; required if \f(CWsasl_username\fR is provided" 4
.IX Item "sasl_password: the password to use for auth; required if sasl_username is provided"
.ie n .IP """allow_partial_success"": if true, will send data even if some recipients were rejected; defaults to false" 4
.el .IP "\f(CWallow_partial_success\fR: if true, will send data even if some recipients were rejected; defaults to false" 4
.IX Item "allow_partial_success: if true, will send data even if some recipients were rejected; defaults to false"
.ie n .IP """helo"": what to say when saying \s-1HELO\s0; no default" 4
.el .IP "\f(CWhelo\fR: what to say when saying \s-1HELO\s0; no default" 4
.IX Item "helo: what to say when saying HELO; no default"
.ie n .IP """localaddr"": local address from which to connect" 4
.el .IP "\f(CWlocaladdr\fR: local address from which to connect" 4
.IX Item "localaddr: local address from which to connect"
.ie n .IP """localport"": local port from which to connect" 4
.el .IP "\f(CWlocalport\fR: local port from which to connect" 4
.IX Item "localport: local port from which to connect"
.ie n .IP """debug"": if true, put the Net::SMTP object in debug mode" 4
.el .IP "\f(CWdebug\fR: if true, put the Net::SMTP object in debug mode" 4
.IX Item "debug: if true, put the Net::SMTP object in debug mode"
.PD
.SH "PARTIAL SUCCESS"
.IX Header "PARTIAL SUCCESS"
If \f(CW\*(C`allow_partial_success\*(C'\fR was set when creating the transport, the transport
may return Email::Sender::Success::Partial objects.  Consult that module's
documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@semiotic.systems>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2020 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
