.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Email::MIME::ContentType 3pm"
.TH Email::MIME::ContentType 3pm "2020-05-24" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Email::MIME::ContentType \- Parse and build a MIME Content\-Type or Content\-Disposition Header
.SH "VERSION"
.IX Header "VERSION"
version 1.024
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Email::MIME::ContentType;
\&
\&  # Content\-Type: text/plain; charset="us\-ascii"; format=flowed
\&  my $ct = \*(Aqtext/plain; charset="us\-ascii"; format=flowed\*(Aq;
\&  my $data = parse_content_type($ct);
\&
\&  $data = {
\&    type       => "text",
\&    subtype    => "plain",
\&    attributes => {
\&      charset => "us\-ascii",
\&      format  => "flowed"
\&    }
\&  };
\&
\&  my $ct_new = build_content_type($data);
\&  # text/plain; charset=us\-ascii; format=flowed
\&
\&
\&  # Content\-Type: application/x\-stuff;
\&  #  title*0*=us\-ascii\*(Aqen\*(AqThis%20is%20even%20more%20;
\&  #  title*1*=%2A%2A%2Afun%2A%2A%2A%20;
\&  #  title*2="isn\*(Aqt it!"
\&  my $ct = q(application/x\-stuff;
\&   title*0*=us\-ascii\*(Aqen\*(AqThis%20is%20even%20more%20;
\&   title*1*=%2A%2A%2Afun%2A%2A%2A%20;
\&   title*2="isn\*(Aqt it!");
\&  my $data = parse_content_type($ct);
\&
\&  $data = {
\&    type       => "application",
\&    subtype    => "x\-stuff",
\&    attributes => {
\&      title => "This is even more ***fun*** isn\*(Aqt it!"
\&    }
\&  };
\&
\&
\&  # Content\-Disposition: attachment; filename=genome.jpeg;
\&  #   modification\-date="Wed, 12 Feb 1997 16:29:51 \-0500"
\&  my $cd = q(attachment; filename=genome.jpeg;
\&    modification\-date="Wed, 12 Feb 1997 16:29:51 \-0500");
\&  my $data = parse_content_disposition($cd);
\&
\&  $data = {
\&    type       => "attachment",
\&    attributes => {
\&      filename            => "genome.jpeg",
\&      "modification\-date" => "Wed, 12 Feb 1997 16:29:51 \-0500"
\&    }
\&  };
\&
\&  my $cd_new = build_content_disposition($data);
\&  # attachment; filename=genome.jpeg; modification\-date="Wed, 12 Feb 1997 16:29:51 \-0500"
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "parse_content_type"
.IX Subsection "parse_content_type"
This routine is exported by default.
.PP
This routine parses email content type headers according to section 5.1 of \s-1RFC
2045\s0 and also \s-1RFC 2231\s0 (Character Set and Parameter Continuations).  It returns
a hash as above, with entries for the \f(CW\*(C`type\*(C'\fR, the \f(CW\*(C`subtype\*(C'\fR, and a hash of
\&\f(CW\*(C`attributes\*(C'\fR.
.PP
For backward compatibility with a really unfortunate misunderstanding of \s-1RFC
2045\s0 by the early implementors of this module, \f(CW\*(C`discrete\*(C'\fR and \f(CW\*(C`composite\*(C'\fR are
also present in the returned hashref, with the values of \f(CW\*(C`type\*(C'\fR and \f(CW\*(C`subtype\*(C'\fR
respectively.
.SS "parse_content_disposition"
.IX Subsection "parse_content_disposition"
This routine is exported by default.
.PP
This routine parses email Content-Disposition headers according to \s-1RFC 2183\s0 and
\&\s-1RFC 2231.\s0  It returns a hash as above, with entries for the \f(CW\*(C`type\*(C'\fR, and a hash
of \f(CW\*(C`attributes\*(C'\fR.
.SS "build_content_type"
.IX Subsection "build_content_type"
This routine is exported by default.
.PP
This routine builds email Content-Type header according to \s-1RFC 2045\s0 and \s-1RFC 2231.\s0
It takes a hash as above, with entries for the \f(CW\*(C`type\*(C'\fR, the \f(CW\*(C`subtype\*(C'\fR, and
optionally also a hash of \f(CW\*(C`attributes\*(C'\fR.  It returns a string representing
Content-Type header.  Non-ASCII attributes are encoded to \s-1UTF\-8\s0 according to
Character Set section of \s-1RFC 2231.\s0  Attribute which has more then 78 \s-1ASCII\s0
characters is split into more attributes accorrding to Parameter Continuations
of \s-1RFC 2231.\s0  For compatibility reasons with clients which do not support
\&\s-1RFC 2231,\s0 output string contains also truncated \s-1ASCII\s0 version of any too long or
non-ASCII attribute.  Encoding to \s-1ASCII\s0 is done via Text::Unidecode module.
.SS "build_content_disposition"
.IX Subsection "build_content_disposition"
This routine is exported by default.
.PP
This routine builds email Content-Disposition header according to \s-1RFC 2182\s0 and
\&\s-1RFC 2231.\s0  It takes a hash as above, with entries for the \f(CW\*(C`type\*(C'\fR, and
optionally also a hash of \f(CW\*(C`attributes\*(C'\fR.  It returns a string representing
Content-Disposition header.  Non-ASCII or too long attributes are handled in
the same way like in build_content_type function.
.SH "WARNINGS"
.IX Header "WARNINGS"
This is not a valid content-type header, according to both \s-1RFC 1521\s0 and \s-1RFC
2045:\s0
.PP
.Vb 1
\&  Content\-Type: type/subtype;
.Ve
.PP
If a semicolon appears, a parameter must.  \f(CW\*(C`parse_content_type\*(C'\fR will carp if
it encounters a header of this type, but you can suppress this by setting
\&\f(CW$Email::MIME::ContentType::STRICT_PARAMS\fR to a false value.  Please consider
localizing this assignment!
.PP
Same applies for \f(CW\*(C`parse_content_disposition\*(C'\fR.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Simon Cozens <simon@cpan.org>
.IP "\(bu" 4
Casey West <casey@geeknest.com>
.IP "\(bu" 4
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 4
Matthew Green <mrg@eterna.com.au>
.IP "\(bu" 4
Pali <pali@cpan.org>
.IP "\(bu" 4
Ricardo Signes <rjbs@semiotic.systems>
.IP "\(bu" 4
Thomas Szukala <ts@abusix.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Simon Cozens.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
