.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Schema::Loader::DBObject 3pm"
.TH DBIx::Class::Schema::Loader::DBObject 3pm "2017-11-19" "perl v5.30.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Schema::Loader::DBObject \- Base Class for Database Objects Such as
Tables and Views in DBIx::Class::Schema::Loader
.SH "METHODS"
.IX Header "METHODS"
.SS "loader"
.IX Subsection "loader"
The loader object this object is associated with, this is a required parameter
to \*(L"new\*(R".
.SS "name"
.IX Subsection "name"
Name of the object. The object stringifies to this value.
.SS "new"
.IX Subsection "new"
The constructor, takes \*(L"loader\*(R", \*(L"name\*(R", \*(L"schema\*(R", and \*(L"ignore_schema\*(R"
as key-value parameters.
.SS "clone"
.IX Subsection "clone"
Make a shallow copy of the object.
.SS "schema"
.IX Subsection "schema"
The schema (or owner) of the object. Returns nothing if \*(L"ignore_schema\*(R" is
true.
.SS "ignore_schema"
.IX Subsection "ignore_schema"
Set to true to make \*(L"schema\*(R" and \*(L"sql_name\*(R" not use the defined \*(L"schema\*(R".
Does not affect \*(L"dbic_name\*(R" (for
qualify_objects testing on
SQLite.)
.SH "sql_name"
.IX Header "sql_name"
Returns the properly quoted full identifier with \*(L"schema\*(R" and \*(L"name\*(R".
.SH "dbic_name"
.IX Header "dbic_name"
Returns a value suitable for the \f(CW\*(C`_\|_PACKAGE_\|_\->table\*(C'\fR call in DBIx::Class Result files.
.SS "name_parts"
.IX Subsection "name_parts"
Returns an arrayref of the values returned by the methods specified in
the moniker_parts of
the \*(L"loader\*(R" object. The object arrayrefifies to this value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
DBIx::Class::Schema::Loader::Table, DBIx::Class::Schema::Loader,
DBIx::Class::Schema::Loader::Base
.SH "AUTHORS"
.IX Header "AUTHORS"
See \*(L"\s-1AUTHORS\*(R"\s0 in DBIx::Class::Schema::Loader.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
